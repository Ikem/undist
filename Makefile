# Makefile for simple modules in the Oscar Framework.
# Copyright (C) 2008 Supercomputing Systems AG
# 
# This library is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2.1 of the License, or (at your option)
# any later version.
# 
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
# 
# You should have received a copy of the GNU Lesser General Public License along
# with this library; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Disable make's built-in rules.
MAKE += -RL --no-print-directory
SHELL := $(shell which bash)

# Generic flags for the C compiler.
CFLAGS := -c -Wall -Ioscar/include -I../opencv-1.1.0/cvaux/include -I../opencv-1.1.0/cv/include -I../opencv-1.1.0/cxcore/include

# Include the file generated by te configuration process.
-include .config
ifeq '$(filter .config, $(MAKEFILE_LIST))' ''
$(error Please configure the application using './configure' prior to compilation.)
endif

# Name for the application to produce.
APP_NAME := template

# Binary executables to generate.
PRODUCTS := app cgi/cgi

# Listings of source files for the different executables.
SOURCES_app := $(wildcard *.c *.cpp)
SOURCES_cgi/cgi := $(wildcard cgi/*.c cgi/*.cpp)

APPS := app-template cgi/template.cgi

ifeq '$(CONFIG_ENABLE_DEBUG)' 'y'
CFLAGS_host := $(CFLAGS) -DOSC_HOST -O2
CFLAGS_target := $(CFLAGS) -DOSC_TARGET -O2
else
CFLAGS_host := $(CFLAGS) -DOSC_HOST -g
CFLAGS_target := $(CFLAGS) -DOSC_TARGET -ggdb3
endif

ifeq '$(CONFIG_ENABLE_SIMULATION)' 'y'
CFLAGS_target += -DOSC_SIM
endif

CC_c_host = gcc -std=gnu99 $(CFLAGS_host)
CC_c_target = bfin-uclinux-gcc -std=gnu99 $(CFLAGS_target)

CC_cpp_host = g++ -std=gnu++98 $(CFLAGS_host)
CC_cpp_target = bfin-uclinux-g++ -std=gnu++98 $(CFLAGS_target)

LD_host := gcc -fPIC
LD_target := bfin-uclinux-gcc -elf2flt="-s 1048576"

APPS := $(patsubst SOURCES_%, %, $(filter SOURCES_%, $(.VARIABLES)))

ARS_host := oscar/library/libosc_host
ARS_target := oscar/library/libosc_target
ifeq '$(CONFIG_ENABLE_SIMULATION)' 'y'
ARS_target := $(ARS_target)_sim
endif
ifeq '$(CONFIG_ENABLE_DEBUG)' 'y'
ARS_host := $(ARS_host)_dbg
ARS_target := $(ARS_target)_dbg
endif
ARS_host := $(ARS_host).a
ARS_target := $(ARS_target).a

ARS_host += ../opencv-1.1.0-host/cv/src/.libs/libcv.a ../opencv-1.1.0-host/cxcore/src/.libs/libcxcore.a ../opencv-1.1.0-host/cvaux/src/.libs/libcvaux.a
ARS_target += ../opencv-1.1.0/cv/src/.libs/libcv.a ../opencv-1.1.0/cxcore/src/.libs/libcxcore.a ../opencv-1.1.0/cvaux/src/.libs/libcvaux.a

LIBS_host := m pthread
LIBS_target := m bfdsp pthread

BINARIES := $(addsuffix _host, $(PRODUCTS)) $(addsuffix _target, $(PRODUCTS))

.PHONY: all clean host target install deploy run reconfigure
all: $(BINARIES)
host target: %: $(addsuffix _%, $(PRODUCTS))

deploy: $(APP_NAME).app
	tar c $< | ssh root@$(CONFIG_TARGET_IP) 'rm -rf $< && tar x -C /tmp' || true

run:
	ssh root@$(CONFIG_TARGET_IP) /tmp/$(APP_NAME).app/run.sh || true

install: cgi/cgi_host
	cp -RL cgi/www/* /var/www
	cp $< /var/www/cgi-bin/cgi
	chmod -Rf a+rX /var/www/ || true

reconfigure:
ifeq '$(CONFIG_PRIVATE_FRAMEWORK)' 'n'
	@ ! [ -e "oscar" ] || [ -h "oscar" ] && ln -sfn $(CONFIG_FRAMEWORK_PATH) oscar || echo "The symlink to the lgx module could not be created as the file ./lgx already exists and is something other than a symlink. Pleas remove it and run 'make reconfigure' to create the symlink."
endif
	@ ! [ -d "oscar" ] || $(MAKE) -C oscar config

oscar/%:
	$(MAKE) -C oscar $*

# Including depency files and optional local Makefile.
-include $(shell find build -name *.d)

# Makefiles and other files all build products should depend on.
PRODUCT_DEPS := $(filter-out %.d, $(MAKEFILE_LIST))

# Do not try to rebuild any of the makefile.
$(MAKEFILE_LIST):;

# Build targets.
define BUILD
BASENAME_$1 := $(patsubst %.c, %, $(patsubst %.cpp, %, $1))
OBJECT_$1_host := $(patsubst %, build/%_host.o, $$(BASENAME_$1))
OBJECT_$1_target := $(patsubst %, build/%_target.o, $$(BASENAME_$1))
SUFFIX_$1 := $(lastword $(subst ., ,$1))

$$(OBJECT_$1_host): $1 $(PRODUCT_DEPS)
	@ mkdir -p $$(dir $$@)
	$$(CC_$$(SUFFIX_$1)_host) -MD $$< -o $$@
	@ grep -oE '[^ \\]+' < $$(@:.o=.d) | sed -r '/:$$$$/d; s|^.*$$$$|$$@: \0\n\0:|' > $$(@:.o=.d~) && mv -f $$(@:.o=.d){~,}
$$(OBJECT_$1_target): $1 $(PRODUCT_DEPS)
	@ mkdir -p $$(dir $$@)
	$$(CC_$$(SUFFIX_$1)_target) -MD $$< -o $$@
	@ grep -oE '[^ \\]+' < $$(@:.o=.d) | sed -r '/:$$$$/d; s|^.*$$$$|$$@: \0\n\0:|' > $$(@:.o=.d~) && mv -f $$(@:.o=.d){~,}
endef

# Link targets.
define LINK
$(foreach i, $(SOURCES_$1), $(eval $(call BUILD,$i)))

LIBS_$1 := $$(if $$(filter cpp, $$(foreach i, $$(SOURCES_$1), $$(SUFFIX_$$i))), stdc++)
LIBS_$1_host := $$(LIBS_$1) $(LIBS_host)
LIBS_$1_target := $$(LIBS_$1) $(LIBS_target)

$1_host: $(foreach i, $(SOURCES_$1), $(OBJECT_$i_host)) $(ARS_host) $(PRODUCT_DEPS)
	$$(LD_host) -o $$@ $$(filter-out $(PRODUCT_DEPS), $$^) $$(addprefix -l, $$(LIBS_$1_host))
$1_target: $(foreach i, $(SOURCES_$1), $(OBJECT_$i_target)) $(ARS_target) $(PRODUCT_DEPS)
	$$(LD_target) -o $$@ $$(filter-out $(PRODUCT_DEPS), $$^) $$(addprefix -l, $$(LIBS_$1_target))
endef
$(foreach i, $(PRODUCTS), $(eval $(call LINK,$i)))

.PHONY: $(APP_NAME).app
$(APP_NAME).app: $(addsuffix _target, $(PRODUCTS))
	rm -rf $@
	cp -rL app $@
	tar c -h -C cgi/www . | gzip > $@/www.tar.gz

# Cleans the application.
clean:
	rm -rf build *.gdb $(BINARIES) $(APP_NAME).app
